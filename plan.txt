Audit my entire project with the single goal of making migrations and seeders production-ready for the first release. Start by scanning every migration and seeder file, plus any factory or test seed data, and build an accurate picture of the current schema and baseline data in my live development database. Cross-reference what’s in code with what’s actually in the DB now; the database is the source of truth. From that comparison, produce a clean, minimal set of migrations that creates the current schema exactly, in the correct dependency order with all foreign keys, indexes, defaults, enums, soft-deletes and pivot tables (including Spatie roles/permissions tables). Remove or consolidate any obsolete, duplicate, or experimental migrations so that a fresh `migrate --force` on a new server yields the exact same structure I already have. Where appropriate, squash historical migrations into a single initial snapshot so first-time deploys are fast and deterministic; if using Laravel’s schema dump, set it up correctly and prune safely.

Rewrite the seeders so they load only the canonical baseline data I want in every environment. That includes roles, permissions, role\_has\_permissions, department groups, departments, settings, schedule event types, and a minimal set of reference rows needed for the app to boot, plus the initial admin user. Do not seed volatile or customer data. Make all seeds idempotent using natural keys and upserts so I can run them repeatedly without creating duplicates. Keep test/demo data behind a dedicated seeder I can call only in local or staging. Ensure Spatie is synchronized from the database export I provided, with permission names and guards exactly matching what exists now; do not assign permissions directly to users, only to roles. Preserve my current role set (admin, support, client) and the final permissions list, and guarantee that seeding reproduces them faithfully on a new environment.

As you refactor, fix ordering and referential integrity so that migrations run cleanly on an empty database and also roll back cleanly. Verify that all foreign keys point to the correct columns and that pivot tables use the right keys and indexes. Align column types and lengths with what’s in the live DB so there are no implicit casts or truncated values during deploy. Where enums or status fields exist, lock their allowed values to what production already uses. Remove factories or legacy seeders that no longer serve the cleaned baseline. If any tables were renamed or split during development, write safe data-migration steps or document a one-time migration path; otherwise, eliminate all transitional code.

When the cleanup is complete, generate a deployment-ready runbook in `guide/release-db-prep.md` that includes a precise description of the final migration set and seeder classes; the exact artisan commands to run for a fresh server; the environment gating for demo vs production seeds; how to run a dry-run locally; how to validate that the schema matches (including a quick diff checklist of critical tables like users, organizations, departments, tickets, notes, messages, contracts, hardware, schedules, schedule\_event\_types, roles, permissions and Spatie pivot tables); and how to roll back safely if needed. Also identify any deprecated migration or seeder files you find and list them with their full paths and your reason for removal so I can delete them confidently. The outcome should be that I can clone the project onto the office server, configure `.env`, run `php artisan migrate --force` and the single production seeder you specify, and end up with a database that mirrors my current schema and baseline data, ready for user testing without manual tweaks.